#!/bin/bash

# Azure Terraform Backend Setup Script
# This script creates the necessary Azure resources for Terraform state management

set -e

# Configuration variables
RESOURCE_GROUP_NAME="rg-terraform-state"
STORAGE_ACCOUNT_NAME="tfstate$(date +%s)"  # Generate unique name
CONTAINER_NAME="tfstate"
LOCATION="East US"
TAGS="Environment=shared ManagedBy=terraform Purpose=state-storage"

echo "Setting up Azure Terraform Backend..."

# Check if Azure CLI is installed and user is logged in
if ! command -v az &> /dev/null; then
    echo "Azure CLI is not installed. Please install it first."
    exit 1
fi

# Check if logged in to Azure
if ! az account show &> /dev/null; then
    echo "You are not logged in to Azure. Please run 'az login' first."
    exit 1
fi

# Get current subscription info
SUBSCRIPTION_ID=$(az account show --query id --output tsv)
SUBSCRIPTION_NAME=$(az account show --query name --output tsv)

echo "ðŸ“‹ Current subscription: $SUBSCRIPTION_NAME ($SUBSCRIPTION_ID)"

# Create resource group
echo "Creating resource group: $RESOURCE_GROUP_NAME"
az group create \
    --name "$RESOURCE_GROUP_NAME" \
    --location "$LOCATION" \
    --tags $TAGS

# Create storage account
echo "Creating storage account: $STORAGE_ACCOUNT_NAME"
az storage account create \
    --name "$STORAGE_ACCOUNT_NAME" \
    --resource-group "$RESOURCE_GROUP_NAME" \
    --location "$LOCATION" \
    --sku Standard_LRS \
    --encryption-services blob \
    --https-only true \
    --min-tls-version TLS1_2 \
    --tags $TAGS

# Create blob container
echo "Creating blob container: $CONTAINER_NAME"
az storage container create \
    --name "$CONTAINER_NAME" \
    --account-name "$STORAGE_ACCOUNT_NAME" \
    --auth-mode login

# Enable versioning and soft delete
echo "Enabling versioning and soft delete..."
az storage account blob-service-properties update \
    --account-name "$STORAGE_ACCOUNT_NAME" \
    --enable-versioning true \
    --enable-delete-retention true \
    --delete-retention-days 7

# Create backend configuration file
BACKEND_CONFIG_FILE="backend.hcl"
echo "Creating backend configuration file: $BACKEND_CONFIG_FILE"

cat > "$BACKEND_CONFIG_FILE" << EOF
# Terraform Backend Configuration
# Generated by setup-backend.sh on $(date)

resource_group_name  = "$RESOURCE_GROUP_NAME"
storage_account_name = "$STORAGE_ACCOUNT_NAME"
container_name       = "$CONTAINER_NAME"
key                  = "webapp/terraform.tfstate"

# Use Azure AD authentication (recommended)
use_azuread_auth = true
EOF

# Output summary
echo ""
echo "Backend setup completed successfully!"
echo ""
echo "Configuration Summary:"
echo "  Resource Group: $RESOURCE_GROUP_NAME"
echo "  Storage Account: $STORAGE_ACCOUNT_NAME"
echo "  Container: $CONTAINER_NAME"
echo "  Location: $LOCATION"
echo ""
echo "Next steps:"
echo "  1. Review the generated backend.hcl file"
echo "  2. Initialize Terraform with: terraform init -backend-config=backend.hcl"
echo "  3. Verify backend configuration: terraform show"
echo ""
echo "Important notes:"
echo "  - Keep the backend.hcl file secure and do not commit it to version control"
echo "  - The storage account name is globally unique: $STORAGE_ACCOUNT_NAME"
echo "  - Soft delete is enabled with 7-day retention"
echo "  - Use Azure AD authentication for better security"
echo ""

# Create .gitignore entries if file exists
if [ -f ".gitignore" ]; then
    echo "Adding backend files to .gitignore..."
    cat >> .gitignore << EOF

# Terraform Backend Configuration
backend.hcl
*.tfstate
*.tfstate.*
.terraform/
.terraform.lock.hcl
EOF
fi

echo "Setup complete! You can now initialize Terraform with remote state."